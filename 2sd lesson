

import unittest

class Test_TestingLists(unittest.TestCase):

        def test_ShouldCreateANewSubListWithoutBothEndValues_When_AnInitialListOfSevenItemsIsProcessed(self):
            initialList = [2, 5, 6, 8, 34, 46, 100]

            actual = initialList[1: 6]

            self.assertSequenceEqual(actual, [5, 6, 8, 34, 46])

        def test_ShouldCreateANewSubListFromTheLastFourElementsOfAnInitialList_When_AListOfEightElementsIsProcessed(self):
            initialList = [1, 2, 3, 4, 5, 6, 7, 8]

            actual = initialList[-4:]

            self.assertSequenceEqual(actual, [5, 6, 7, 8])

        def test_ShouldCreateANewSubListFrom_When_AListOfElevenElementsIsProcessed(self):
            initialList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

            actual = initialList[2::3]

            self.assertSequenceEqual(actual, [3, 6, 9])

        def test_ShouldCreateANewSubListOfEvenNumbers_When_AListOfRandomIntegersIsProcessed(self):
            initialList = [10, 4, 6, 3, 7, 8, 9, 51, 67, 24, 5, 100]

            a = 8
            isEven = False
            if a % 2 == 0:
                isEven = True

            actual = [x for x in initialList if x % 2 == 0]

            self.assertSequenceEqual(actual, [10, 4, 6, 8, 24, 100])

        def test_ShouldCreateANewListOfStringsOnly_When_AListOfMixedTypeValuesIsProcessed(self):
            initialList = ["OK", 3, 5, True, "PAS OK", 5.8, "MAYBE"]

            isBool = False
            answer = False

            if type(answer) == type(True):
                answer = True

            actual = [x for x in initialList if type(x) == str]

            self.assertSequenceEqual(actual, ["OK", "PAS OK", "MAYBE"])

        def test_ShouldCreateANewListOfStringsOnlyReplacingNonStringsByASpecialString_When_AListOfMixedTypeValuesIsProcessed \
                (self):
            initialList = ["OK", 3, 5, True, "PAS OK", 5.8, "MAYBE"]

            isBool = False
            answer = False
            if type(answer) == type(True):
                answer = True

            actual = [x if type(x) == str else "NOT A STRING" for x in initialList]

            self.assertSequenceEqual(actual, ["OK", "NOT A STRING", "NOT A STRING", "NOT A STRING", "PAS OK", "NOT A STRING", "MAYBE"])

        def test_ShouldGenerateAFlatListOfIntegers_When_AListOfListIsProcessed(self):
            initialList = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

            actual = [x for sublist in initialList for x in sublist]

            self.assertSequenceEqual(actual, [1, 2, 3, 4, 5, 6, 7, 8, 9])


if __name__ == "__main__":
    unittest.main()
